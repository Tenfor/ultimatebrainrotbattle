local events = require("event.events")
local gameEvents = require("main/events/gameEvents")
local playerSkills = require("main/battle/playerSkills")
local battleController = require "main/battle/battleController"
local playerModel = require("main/battle/playerModel")
local buffs = require("main/battle/buffs")

local function setMode(self,newMode)
	self.mode = newMode
end

local function onSkillTrigger(self, skillId)
	if skillId == playerSkills.LION_STRIKE then 
		setMode(self, skillId)
	end
	if skillId == playerSkills.METEOR_SMASH then 
		setMode(self, skillId)
	end
	if skillId == playerSkills.BERSERK then 
		print("BERSERK")
		battleController.player_berserk(go.get_id())
	end
end

local function attack(self)
	if self.mode == "normal" then
		battleController.player_attack(go.get_id())
	elseif self.mode == playerSkills.LION_STRIKE then
		battleController.player_lion_strike(go.get_id())
		self.mode = "normal"
	elseif self.mode == playerSkills.METEOR_SMASH then
		battleController.player_meteor_smash(go.get_id())
		self.mode = "normal"
	else
		print("PLAYER HAS INVALID MODE",self.mode)
	end
end

function init(self)
	--timer.delay(1, true, attack)
	self.counter = 0
	self.mode = "normal"
	events.subscribe(gameEvents.TRIGGER_SKILL, onSkillTrigger, self)
end

function final(self)
	events.unsubscribe(gameEvents.TRIGGER_SKILL, onSkillTrigger, self)
end

function update(self, dt)
	playerModel.updateBuffs(dt)
	local extra = 1
	if playerModel.hasBuff(buffs.BERSERK) then
		extra = 3 
	end
	self.counter = self.counter + (dt*playerModel.spd) * extra
	if self.counter >= 3 then
		attack(self)
		--local time = os.date("*t")
		--print(string.format("Most: %04d-%02d-%02d %02d:%02d:%02d",
		--time.year, time.month, time.day,
		--time.hour, time.min, time.sec))
		self.counter = 0
	end
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
