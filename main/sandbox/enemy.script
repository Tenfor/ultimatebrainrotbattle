local battleController = require "main/battle/battleController"
local enemyModel = require("main/battle/enemyModel")
local events = require("event.events")
local gameEvents = require("main/events/gameEvents")
local buffs = require("main/battle/buffs")
local skills = require("main/battle/skills")
local hitType = require("main/battle/hitType")
local effectFactoryFinder = require("main/battle/effectFactoryFinder")

local function onPlayEffect(self,effectUrl,x, y, rot,scale, flip)
	local xOffset = x or 0
	local yOffset = y or 0

	local rotation = rot and vmath.quat_rotation_z(math.rad(rot)) or vmath.quat()
	local pos = go.get_position("#root")
	pos.x = pos.x + xOffset
	pos.y = pos.y + yOffset
	local scale = scale or 1
	local factoryName = "#enemyEffectFactory"..effectFactoryFinder.getFactoryPostFix(effectUrl)
	factory.create(factoryName, pos, rotation,
	{animName=hash(effectUrl),xOffset = xOffset, yOffset = yOffset, target=hash("enemy"), flip = flip},
	scale)
end

local function onPlayParticle(self,particleUrl)
	particlefx.play(particleUrl)
end

local function onShootProjectile(self,projectileUrl,x,y,rot,scale,flip)
	local xOffset = x or 0
	local yOffset = y or 0
	local rotation = rot and vmath.quat_rotation_z(math.rad(rot)) or vmath.quat()
	local pos = go.get_position("#root")
	pos.x = pos.x + xOffset
	pos.y = pos.y + yOffset
	local scale = scale or 1

	factory.create("root#projectileFactory", pos, rotation, 
	{animName=hash(projectileUrl),xOffset = xOffset, yOffset = yOffset, 
	enemyCasted=true, flip=flip, speed = 1500}, 
	scale)
end

local function startCasting(self,skillId)
	self.casting = true
	events.trigger(gameEvents.ENEMY_START_CASTING,skillId,skills.getCastTime(skillId))
end

local function onInterruptCasting(self)
	self.casting = false
end

local function onFinishCasting(self,skillId)
	print("ENEMY - ENEMYFINESHCASTING")
	self.casting = false
	if skillId == skills.LIGHTNING_BOLT then
		battleController.lightning_bolt(go.get_id(),true)
	end
end

local function attack(self)	
	if enemyModel.pattern[self.currentMod] == skills.EMPTY then 
		battleController.attack(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.LION_STRIKE then 
		battleController.lion_strike(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.METEOR_SMASH then 
		battleController.meteor_smash(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.BERSERK then 
		battleController.berserk(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.ARCANE_BOLT then 
		battleController.arcane_bolt(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.FIRE_BOLT then 
		battleController.fire_bolt(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.FROST_BOLT then 
		battleController.frost_bolt(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.BERSERK then 
		battleController.berserk(go.get_id(),true)
	elseif enemyModel.pattern[self.currentMod] == skills.SHIELD then
		battleController.shield(go.get_id(), true)
	elseif enemyModel.pattern[self.currentMod] == skills.LIGHTNING_BOLT then
		startCasting(self,skills.LIGHTNING_BOLT)
	end

	self.currentMod = self.currentMod + 1
	if self.currentMod > #enemyModel.pattern then 
		self.currentMod = 0
	end
end

local function onEnemyHurt(self,dmg, vfxType, sfxType)
	--sprite.play_flipbook("hit_effect#sprite", "hit")
	local pos = go.get_position()
	pos.y = pos.y + 100

	if enemyModel.hasBuff(buffs.SHIELD) then
		events.trigger(gameEvents.PLAY_SFX,"#swordhit")
	elseif sfxType == hitType.SFX.BASIC then
		local rand = math.random(1,2)
		events.trigger(gameEvents.PLAY_SFX,dmg.crit and "#hit_3" or "#hit_"..tostring(rand))
	elseif sfxType == hitType.SFX.CRITONLY and dmg.crit then
		events.trigger(gameEvents.PLAY_SFX,"#hit_3")
	end

	if not enemyModel.hasBuff(buffs.SHIELD) then
		if(dmg.crit) then 
			events.trigger(gameEvents.SHAKE_EFFECT,0.15,20)
			events.trigger(gameEvents.ADD_RAGE,5)
			events.trigger(gameEvents.ADD_CP,1)
			factory.create("/root#statusTextFactory", vmath.vector3(640,500,0.2), nil)
		end
		factory.create("#floatingTextFactory", pos, nil, {value=dmg.dmg, crit=dmg.crit}, 1)
		
		if(vfxType == hitType.VFX.BASIC) then
			local randRot = math.random(360)
			local randXoffset = math.random(-20,20)
			local randYoffset = math.random(-20,20)
			events.trigger(gameEvents.ADD_RAGE,5)
			events.trigger(gameEvents.PLAY_EFFECT_ON_ENEMY,"hit2",-70+randXoffset,75+randYoffset,randRot,0.3)
		elseif(type == hitType.VFX.FLASHING) then
			go.animate("#sprite", "color_add.w", go.PLAYBACK_ONCE_PINGPONG, 1, go.EASING_LINEAR, 0.1)
		end
	end
end

local function updateBuffs(self,dt)
	enemyModel.updateBuffs(dt)

	if enemyModel.hasBuff(buffs.SHIELD) then 
		go.set("#shield", "tint.w", 1)
	else 
		go.set("#shield", "tint.w", 0)
	end

	if enemyModel.hasBuff(buffs.STUN) then
		go.set("/stun#stun", "tint.w", 1)
		local rot_speed = math.pi * 6 * dt  
		local current_rot = go.get_rotation("/stun#stun")
		local new_rot = current_rot * vmath.quat_rotation_z(rot_speed)
		go.set_rotation(new_rot,"/stun#stun")
	else 
		go.set("/stun#stun", "tint.w", 0)
	end
	
	if enemyModel.hasBuff(buffs.FROST) then
		if go.get("#sprite", "tint") ~= vmath.vector4(0.4, 0.4, 1, 1) then
			go.set("#sprite", "tint", vmath.vector4(0.4, 0.4, 1, 1))
		end
	elseif enemyModel.hasBuff(buffs.BERSERK) then
		if go.get("#sprite", "tint") ~= vmath.vector4(1, 0, 0, 1) then
			go.set("#sprite", "tint", vmath.vector4(1, 0, 0, 1))
		end
	else
		if go.get("#sprite", "tint") ~= vmath.vector4(1, 1, 1, 1) then
			go.set("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
		end
	end
end

function init(self)
	self.counter = 0
	self.currentMod = 1
	events.subscribe(gameEvents.ENEMY_HURT, onEnemyHurt,self)
	events.subscribe(gameEvents.PLAY_EFFECT_ON_ENEMY, onPlayEffect,self)
	events.subscribe(gameEvents.PLAY_PARTICLE_ON_ENEMY, onPlayParticle,self)
	events.subscribe(gameEvents.ENEMY_SHOOT_PROJECTILE,onShootProjectile, self)
	events.subscribe(gameEvents.ENEMY_FINISH_CASTING,onFinishCasting, self)
	events.subscribe(gameEvents.INTERRUPT_ENEMY_CASTING,onInterruptCasting, self)

	--go.animate("#sprite", "color_add.w", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_LINEAR, 2)		
end

function final(self)
	events.unsubscribe(gameEvents.ENEMY_HURT, onEnemyHurt,self)
	events.unsubscribe(gameEvents.PLAY_EFFECT_ON_ENEMY, onPlayEffect, self)
	events.unsubscribe(gameEvents.PLAY_PARTICLE_ON_ENEMY, onPlayParticle,self)
	events.unsubscribe(gameEvents.ENEMY_SHOOT_PROJECTILE,onShootProjectile, self)
	events.unsubscribe(gameEvents.ENEMY_FINISH_CASTING,onFinishCasting, self)
	events.unsubscribe(gameEvents.INTERRUPT_ENEMY_CASTING,onInterruptCasting, self)
end

function update(self, dt)
	updateBuffs(self,dt)
	local extra = 1
	if enemyModel.hasBuff(buffs.BERSERK) then
		extra = extra*3 
	end
	if enemyModel.hasBuff(buffs.FROST) then 
		extra = extra / 3
	end
	if not self.casting and not enemyModel.hasBuff(buffs.STUN) then 
		self.counter = self.counter + (dt*enemyModel.spd) * extra
	end
	if self.counter >= 3 then
		attack(self)
	--	local time = os.date("*t")
	--	print(string.format("Most: %04d-%02d-%02d %02d:%02d:%02d",
	--	time.year, time.month, time.day,
	--	time.hour, time.min, time.sec))
		self.counter = 0
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
