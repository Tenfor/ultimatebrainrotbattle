local battleController = require "main/battle/battleController"
local enemyModel = require("main/battle/enemyModel")
local events = require("event.events")
local gameEvents = require("main/events/gameEvents")

local function onPlayEffect(self,effectUrl,x, y, rot,scale)
	local xOffset = x or 0
	local yOffset = y or 0
	local rotation = rot and vmath.quat_rotation_z(math.rad(rot)) or vmath.quat()
	local pos = go.get_position("#root")
	pos.x = pos.x + xOffset
	pos.y = pos.y + yOffset
	local scale = scale or 1
	factory.create("#effectFactory", pos, rotation, {animName=hash(effectUrl),xOffset = xOffset, yOffset = yOffset}, scale)
end

local function attack(self)
	battleController.enemy_attack(go.get_id())
end

local function onEnemyHurt(self,dmg)
	--sprite.play_flipbook("hit_effect#sprite", "hit")
	print("onenemyhurt")
	local pos = go.get_position()
	pos.y = pos.y + 100

	local id_str = tostring(go.get_id())
	factory.create("#floatingTextFactory", pos, nil, {value=dmg, crit=false}, 1)
	
end

function init(self)
	self.counter = 0
	events.subscribe(gameEvents.ENEMY_HURT, onEnemyHurt,self)
	events.subscribe(gameEvents.PLAY_EFFECT, onPlayEffect,self)
end

function final(self)
	events.unsubscribe(gameEvents.ENEMY_HURT, onEnemyHurt,self)
	events.unsubscribe(gameEvents.PLAY_EFFECT, onPlayEffect, self)
end

function update(self, dt)
	self.counter = self.counter + (dt*enemyModel.spd)
	if self.counter >= 3 then
		attack(self)
	--	local time = os.date("*t")
	--	print(string.format("Most: %04d-%02d-%02d %02d:%02d:%02d",
	--	time.year, time.month, time.day,
	--	time.hour, time.min, time.sec))
		self.counter = 0
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
